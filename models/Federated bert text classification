{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPS2shkejpQzB9z4ao2NN/X"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"940badc64f9b41a585e610e31fc98181":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e838c26d612045c786995ce366263889","IPY_MODEL_f974515c540342a390bbb76bb57d61a2","IPY_MODEL_aa3cc43e09c04507b56f90a3dafd6ae4"],"layout":"IPY_MODEL_5c0f14e9712c49399d1287098b58520e"}},"e838c26d612045c786995ce366263889":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5348d1c547ec455bbf0ee7d39ee9f9e0","placeholder":"​","style":"IPY_MODEL_319b96efce7644299305f15b829636c8","value":"Downloading: 100%"}},"f974515c540342a390bbb76bb57d61a2":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_92c6aa583c90456fa15cec5c9d83cf03","max":213450,"min":0,"orientation":"horizontal","style":"IPY_MODEL_146a1e5a631147f8a39071dfbbe5b50b","value":213450}},"aa3cc43e09c04507b56f90a3dafd6ae4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_8f000cd0bf7947b0a7df5254272ef4ce","placeholder":"​","style":"IPY_MODEL_33d7f643d34a41928e052e48ed2cf54c","value":" 213k/213k [00:00&lt;00:00, 277kB/s]"}},"5c0f14e9712c49399d1287098b58520e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5348d1c547ec455bbf0ee7d39ee9f9e0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"319b96efce7644299305f15b829636c8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"92c6aa583c90456fa15cec5c9d83cf03":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"146a1e5a631147f8a39071dfbbe5b50b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"8f000cd0bf7947b0a7df5254272ef4ce":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"33d7f643d34a41928e052e48ed2cf54c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"45802f03ce9c4f179e1c7d67da98154c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_d1ecd787231d46638ce0e7ddd5713294","IPY_MODEL_8e87d65c709c447a8c341eeec3b8e8ad","IPY_MODEL_35a82257768f40e48ef470497b386768"],"layout":"IPY_MODEL_4cc2339d731f4fb690f755e3db0eb309"}},"d1ecd787231d46638ce0e7ddd5713294":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_380498052f124cb0a7d52054346ad036","placeholder":"​","style":"IPY_MODEL_d7f3fd96c0204dc683b43bd6d4119795","value":"Downloading: 100%"}},"8e87d65c709c447a8c341eeec3b8e8ad":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_89c84676f4f34b209452896cbe3026a4","max":29,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5cf227b12dd547cea943d01ab6cbe6c6","value":29}},"35a82257768f40e48ef470497b386768":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5bd8bd19f4b94735be39d7d8055ef39c","placeholder":"​","style":"IPY_MODEL_7763dc5ad0354d57bbd3046d8836391d","value":" 29.0/29.0 [00:00&lt;00:00, 278B/s]"}},"4cc2339d731f4fb690f755e3db0eb309":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"380498052f124cb0a7d52054346ad036":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d7f3fd96c0204dc683b43bd6d4119795":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"89c84676f4f34b209452896cbe3026a4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5cf227b12dd547cea943d01ab6cbe6c6":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5bd8bd19f4b94735be39d7d8055ef39c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7763dc5ad0354d57bbd3046d8836391d":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"8094842b67fd4b108e2f7d391dc89921":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f7e87306bf2046698a662a40f49f1407","IPY_MODEL_bcaf9fd45fae4b0a910cdbba1dd2e2f0","IPY_MODEL_7a40a5fd42374037b9be9504d0a9dac6"],"layout":"IPY_MODEL_faa367d783b44455811a36c1a0733b0b"}},"f7e87306bf2046698a662a40f49f1407":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6b2e226a6e4a42b0bacd9ebccb36fbe5","placeholder":"​","style":"IPY_MODEL_99cbf5fc5ec74ef8b7372f61c3ae8148","value":"Downloading: 100%"}},"bcaf9fd45fae4b0a910cdbba1dd2e2f0":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0f445789a030424fa9f77d52b2462191","max":570,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5dbc602eb5bf4179a876d3c8ae75d800","value":570}},"7a40a5fd42374037b9be9504d0a9dac6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_73e13b29e999408f9444f2482adc096c","placeholder":"​","style":"IPY_MODEL_6f2c5c15838b40d891da66827ac4d4e6","value":" 570/570 [00:00&lt;00:00, 5.88kB/s]"}},"faa367d783b44455811a36c1a0733b0b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6b2e226a6e4a42b0bacd9ebccb36fbe5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"99cbf5fc5ec74ef8b7372f61c3ae8148":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0f445789a030424fa9f77d52b2462191":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5dbc602eb5bf4179a876d3c8ae75d800":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"73e13b29e999408f9444f2482adc096c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6f2c5c15838b40d891da66827ac4d4e6":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","source":["# https://towardsdatascience.com/preserving-data-privacy-in-deep-learning-part-3-ae2103c40c22\n","#https://towardsdatascience.com/text-classification-with-bert-in-pytorch-887965e5820f"],"metadata":{"id":"9cwirYuVMdiQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pip install transformers"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MRY-cvowtyEI","executionInfo":{"status":"ok","timestamp":1666379711377,"user_tz":240,"elapsed":13930,"user":{"displayName":"Md Rafi Rashid","userId":"07573253165411180386"}},"outputId":"48b473e7-fa61-45cf-b1be-4fba8e8b4a75"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting transformers\n","  Downloading transformers-4.23.1-py3-none-any.whl (5.3 MB)\n","\u001b[K     |████████████████████████████████| 5.3 MB 29.8 MB/s \n","\u001b[?25hRequirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.8.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Collecting tokenizers!=0.11.3,<0.14,>=0.11.1\n","  Downloading tokenizers-0.13.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (7.6 MB)\n","\u001b[K     |████████████████████████████████| 7.6 MB 56.1 MB/s \n","\u001b[?25hRequirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.64.1)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from transformers) (21.3)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2022.6.2)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.21.6)\n","Collecting huggingface-hub<1.0,>=0.10.0\n","  Downloading huggingface_hub-0.10.1-py3-none-any.whl (163 kB)\n","\u001b[K     |████████████████████████████████| 163 kB 55.4 MB/s \n","\u001b[?25hRequirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers) (4.13.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0,>=0.10.0->transformers) (4.1.1)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->transformers) (3.0.9)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers) (3.9.0)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2022.9.24)\n","Installing collected packages: tokenizers, huggingface-hub, transformers\n","Successfully installed huggingface-hub-0.10.1 tokenizers-0.13.1 transformers-4.23.1\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vqS8yQyrFAMw"},"outputs":[],"source":["import pandas as pd\n","from transformers import BertTokenizer\n","import torch\n","import numpy as np\n","from transformers import BertTokenizer\n","from torch import nn\n","from transformers import BertModel\n","from torch.optim import Adam\n","import os\n","import random\n","from tqdm import tqdm\n","import numpy as np\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.utils.data.dataset import Dataset\n","torch.backends.cudnn.benchmark=True\n"]},{"cell_type":"code","source":["classes_pc = 2\n","num_clients = 10\n","num_selected = 3\n","num_rounds = 100\n","epochs = 5\n","batch_size = 32\n","baseline_num = 50\n","retrain_epochs = 6\n","real_wd = False #False: non_iid dataset, True: Real-world dataset"],"metadata":{"id":"v8I4iYy9FIad"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["datapath = 'bbc-text.csv'\n","df = pd.read_csv(datapath)\n","print(df.head())\n","df.groupby(['category']).size().plot.bar()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":462},"id":"r3v6fkMevMaC","executionInfo":{"status":"ok","timestamp":1666379714805,"user_tz":240,"elapsed":336,"user":{"displayName":"Md Rafi Rashid","userId":"07573253165411180386"}},"outputId":"5053c763-5b39-43b0-b07e-458b0711a180"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["        category                                               text\n","0           tech  tv future in the hands of viewers with home th...\n","1       business  worldcom boss  left books alone  former worldc...\n","2          sport  tigers wary of farrell  gamble  leicester say ...\n","3          sport  yeading face newcastle in fa cup premiership s...\n","4  entertainment  ocean s twelve raids box office ocean s twelve...\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f36ceec7ad0>"]},"metadata":{},"execution_count":4},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["\n","tokenizer = BertTokenizer.from_pretrained('bert-base-cased')\n","\n","class Dataset(torch.utils.data.Dataset):\n","\n","    def __init__(self, x, y):\n","\n","        self.labels = y\n","        self.texts = [tokenizer(text, \n","                               padding='max_length', max_length = 512, truncation=True,\n","                                return_tensors=\"pt\") for text in x]\n","\n","    def classes(self):\n","        return self.labels\n","\n","    def __len__(self):\n","        return len(self.labels)\n","\n","    def get_batch_labels(self, idx):\n","        # Fetch a batch of labels\n","        return np.array(self.labels[idx])\n","\n","    def get_batch_texts(self, idx):\n","        # Fetch a batch of inputs\n","        return self.texts[idx]\n","\n","    def __getitem__(self, idx):\n","\n","        batch_texts = self.get_batch_texts(idx)\n","        batch_y = self.get_batch_labels(idx)\n","\n","        return batch_texts, batch_y\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":113,"referenced_widgets":["940badc64f9b41a585e610e31fc98181","e838c26d612045c786995ce366263889","f974515c540342a390bbb76bb57d61a2","aa3cc43e09c04507b56f90a3dafd6ae4","5c0f14e9712c49399d1287098b58520e","5348d1c547ec455bbf0ee7d39ee9f9e0","319b96efce7644299305f15b829636c8","92c6aa583c90456fa15cec5c9d83cf03","146a1e5a631147f8a39071dfbbe5b50b","8f000cd0bf7947b0a7df5254272ef4ce","33d7f643d34a41928e052e48ed2cf54c","45802f03ce9c4f179e1c7d67da98154c","d1ecd787231d46638ce0e7ddd5713294","8e87d65c709c447a8c341eeec3b8e8ad","35a82257768f40e48ef470497b386768","4cc2339d731f4fb690f755e3db0eb309","380498052f124cb0a7d52054346ad036","d7f3fd96c0204dc683b43bd6d4119795","89c84676f4f34b209452896cbe3026a4","5cf227b12dd547cea943d01ab6cbe6c6","5bd8bd19f4b94735be39d7d8055ef39c","7763dc5ad0354d57bbd3046d8836391d","8094842b67fd4b108e2f7d391dc89921","f7e87306bf2046698a662a40f49f1407","bcaf9fd45fae4b0a910cdbba1dd2e2f0","7a40a5fd42374037b9be9504d0a9dac6","faa367d783b44455811a36c1a0733b0b","6b2e226a6e4a42b0bacd9ebccb36fbe5","99cbf5fc5ec74ef8b7372f61c3ae8148","0f445789a030424fa9f77d52b2462191","5dbc602eb5bf4179a876d3c8ae75d800","73e13b29e999408f9444f2482adc096c","6f2c5c15838b40d891da66827ac4d4e6"]},"id":"RsodvsOTvZta","executionInfo":{"status":"ok","timestamp":1666379723450,"user_tz":240,"elapsed":8648,"user":{"displayName":"Md Rafi Rashid","userId":"07573253165411180386"}},"outputId":"973c0a09-d2f0-4b18-d22e-647a217f80a7"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/213k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"940badc64f9b41a585e610e31fc98181"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/29.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"45802f03ce9c4f179e1c7d67da98154c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["Downloading:   0%|          | 0.00/570 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"8094842b67fd4b108e2f7d391dc89921"}},"metadata":{}}]},{"cell_type":"code","source":["np.random.seed(112)\n","\n","labels = {'business':0,\n","          'entertainment':1,\n","          'sport':2,\n","          'tech':3,\n","          'politics':4\n","          }\n","df['category']=[labels[label] for label in df['category']]\n","\n","df_train, df_val, df_test = np.split(df.sample(frac=1, random_state=42), \n","                                     [int(.8*len(df)), int(.9*len(df))])\n","\n","print(len(df_train),len(df_val), len(df_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tkCq9mXlvkib","executionInfo":{"status":"ok","timestamp":1666379723763,"user_tz":240,"elapsed":3,"user":{"displayName":"Md Rafi Rashid","userId":"07573253165411180386"}},"outputId":"2cc404a4-7cd3-40fb-8d51-40b7e405c794"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1780 222 223\n"]}]},{"cell_type":"code","source":["def clients_rand(train_len, nclients):\n","  '''\n","  train_len: size of the train data\n","  nclients: number of clients\n","  \n","  Returns: to_ret\n","  \n","  This function creates a random distribution \n","  for the clients, i.e. number of texts each client \n","  possess.\n","  '''\n","  client_tmp=[]\n","  sum_=0\n","  #### creating random values for each client ####\n","  for i in range(nclients-1):\n","    tmp=random.randint(10,100)\n","    sum_+=tmp\n","    client_tmp.append(tmp)\n","\n","  client_tmp= np.array(client_tmp)\n","  #### using those random values as weights ####\n","  clients_dist= ((client_tmp/sum_)*train_len).astype(int)\n","  num  = train_len - clients_dist.sum()\n","  to_ret = list(clients_dist)\n","  to_ret.append(num)\n","  return to_ret"],"metadata":{"id":"SduNyFECKDGT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def split_image_data_realwd(data, labels, n_clients=100, verbose=True):\n","  '''\n","  Splits (data, labels) among 'n_clients s.t. every client can holds any number of classes which is trying to simulate real world dataset\n","  Input:\n","    data : [n_data x shape]\n","    labels : [n_data (x 1)] from 0 to n_labels(10)\n","    n_clients : number of clients\n","    verbose : True/False => True for printing some info, False otherwise\n","  Output:\n","    clients_split : splitted client data into desired format\n","  '''\n","  def break_into(n,m):\n","    ''' \n","    return m random integers with sum equal to n \n","    '''\n","    to_ret = [1 for i in range(m)]\n","    for i in range(n-m):\n","        ind = random.randint(0,m-1)\n","        to_ret[ind] += 1\n","    return to_ret\n","\n","  #### constants ####\n","  n_classes = len(set(labels))\n","  classes = list(range(n_classes))\n","  np.random.shuffle(classes)\n","  label_indcs  = [list(np.where(labels==class_)[0]) for class_ in classes]\n","  \n","  #### classes for each client ####\n","  tmp = [np.random.randint(1,10) for i in range(n_clients)]\n","  total_partition = sum(tmp)\n","\n","  #### create partition among classes to fulfill criteria for clients ####\n","  class_partition = break_into(total_partition, len(classes))\n","\n","  #### applying greedy approach first come and first serve ####\n","  class_partition = sorted(class_partition,reverse=True)\n","  class_partition_split = {}\n","\n","  #### based on class partition, partitioning the label indexes ###\n","  for ind, class_ in enumerate(classes):\n","      class_partition_split[class_] = [list(i) for i in np.array_split(label_indcs[ind],class_partition[ind])]\n","      \n","#   print([len(class_partition_split[key]) for key in  class_partition_split.keys()])\n","\n","  clients_split = []\n","  count = 0\n","  for i in range(n_clients):\n","    n = tmp[i]\n","    j = 0\n","    indcs = []\n","\n","    while n>0:\n","        class_ = classes[j]\n","        if len(class_partition_split[class_])>0:\n","            indcs.extend(class_partition_split[class_][-1])\n","            count+=len(class_partition_split[class_][-1])\n","            class_partition_split[class_].pop()\n","            n-=1\n","        j+=1\n","\n","    ##### sorting classes based on the number of examples it has #####\n","    classes = sorted(classes,key=lambda x:len(class_partition_split[x]),reverse=True)\n","    if n>0:\n","        raise ValueError(\" Unable to fulfill the criteria \")\n","    clients_split.append([data[indcs], labels[indcs]])\n","#   print(class_partition_split)\n","#   print(\"total example \",count)\n","\n","\n","  def print_split(clients_split): \n","    print(\"Data split:\")\n","    for i, client in enumerate(clients_split):\n","      split = np.sum(client[1].reshape(1,-1)==np.arange(n_labels).reshape(-1,1), axis=1)\n","      print(\" - Client {}: {}\".format(i,split))\n","    print()\n","      \n","    if verbose:\n","      print_split(clients_split)\n","  \n","  clients_split = np.array(clients_split)\n","  \n","  return clients_split"],"metadata":{"id":"FVFakmTWLqLL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def split_image_data(data, labels, n_clients=100, classes_per_client=10, shuffle=True, verbose=True):\n","  '''\n","  Splits (data, labels) among 'n_clients s.t. every client can holds 'classes_per_client' number of classes\n","  Input:\n","    data : [n_data x shape]\n","    labels : [n_data (x 1)] from 0 to n_labels\n","    n_clients : number of clients\n","    classes_per_client : number of classes per client\n","    shuffle : True/False => True for shuffling the dataset, False otherwise\n","    verbose : True/False => True for printing some info, False otherwise\n","  Output:\n","    clients_split : client data into desired format\n","  '''\n","  #### constants #### \n","  n_data = len(data)\n","  n_labels = np.max(labels) + 1\n","\n","\n","  ### client distribution ####\n","  data_per_client = clients_rand(len(data), n_clients)\n","  data_per_client_per_class = [np.maximum(1,nd // classes_per_client) for nd in data_per_client]\n","  # sort for labels\n","  data_idcs = [[] for i in range(n_labels)]\n","  for j, label in enumerate(labels):\n","    data_idcs[label] += [j]\n","  if shuffle:\n","    for idcs in data_idcs:\n","      np.random.shuffle(idcs)\n","    \n","  # split data among clients\n","  clients_split = []\n","  c = 0\n","  for i in range(n_clients):\n","    client_idcs = []\n","        \n","    budget = data_per_client[i]\n","    c = np.random.randint(n_labels)\n","    while budget > 0:\n","      take = min(data_per_client_per_class[i], len(data_idcs[c]), budget)\n","      \n","      client_idcs += data_idcs[c][:take]\n","      data_idcs[c] = data_idcs[c][take:]\n","      \n","      budget -= take\n","      c = (c + 1) % n_labels\n","      \n","    clients_split += [(data[client_idcs], labels[client_idcs])]\n","\n","  def print_split(clients_split): \n","    print(\"Data split:\")\n","    for i, client in enumerate(clients_split):\n","      split = np.sum(client[1].reshape(1,-1)==np.arange(n_labels).reshape(-1,1), axis=1)\n","      print(\" - Client {}: {}\".format(i,split))\n","    print()\n","      \n","    if verbose:\n","      print_split(clients_split)\n","  \n","  clients_split = np.array(clients_split)\n","  \n","  return clients_split"],"metadata":{"id":"ToVegl8ZPAPl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def shuffle_list(data):\n","  '''\n","  This function returns the shuffled data\n","  '''\n","  for i in range(len(data)):\n","    tmp_len= len(data[i][0])\n","    index = [i for i in range(tmp_len)]\n","    random.shuffle(index)\n","    data[i][0],data[i][1] = shuffle_list_data(data[i][0],data[i][1])\n","  return data\n","\n","\n","def shuffle_list_data(x, y):\n","  '''\n","  This function is a helper function, shuffles an\n","  array while maintaining the mapping between x and y\n","  '''\n","  inds = list(range(len(x)))\n","  random.shuffle(inds)\n","  return x[inds],y[inds]"],"metadata":{"id":"f3A4SihuSFMy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train= np.array(df_train['text'])\n","y_train=np.array(df_train['category'])\n","x_val=np.array(df_val['text'])\n","y_val=np.array(df_val['category'])"],"metadata":{"id":"siRgEpKhH9TR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_data_loaders(nclients,batch_size,classes_pc=2, real_wd =False ,verbose=True ):\n","\n","  if real_wd:\n","    split = split_image_data_realwd(x_train, y_train, n_clients=nclients, verbose = verbose)\n","  else:  \n","    split = split_image_data(x_train, y_train, n_clients=nclients, classes_per_client=classes_pc, verbose=verbose)\n","  \n","  split_tmp = shuffle_list(split)\n","  \n","  train_dataloaders = [torch.utils.data.DataLoader(Dataset(x,y), batch_size=batch_size, shuffle=True) for x,y in split_tmp]\n","  val_dataloaders = torch.utils.data.DataLoader(Dataset(x_val,y_val), batch_size=batch_size, shuffle=False)\n","\n","  return train_dataloaders, val_dataloaders\n","  \n"],"metadata":{"id":"Ymvv1bP8TI3n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class BertClassifier(nn.Module):\n","\n","    def __init__(self, dropout=0.5):\n","\n","        super(BertClassifier, self).__init__()\n","\n","        self.bert = BertModel.from_pretrained('bert-base-cased')\n","        self.dropout = nn.Dropout(dropout)\n","        self.linear = nn.Linear(768, 5)\n","        self.relu = nn.ReLU()\n","\n","    def forward(self, input_id, mask):\n","\n","        _, pooled_output = self.bert(input_ids= input_id, attention_mask=mask,return_dict=False)\n","        dropout_output = self.dropout(pooled_output)\n","        linear_output = self.linear(dropout_output)\n","        final_layer = self.relu(linear_output)\n","\n","        return final_layer"],"metadata":{"id":"3x-W46HQxnp2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def baseline_data(num):\n","  '''\n","  Returns baseline data loader to be used on retraining on global server\n","  Input:\n","        num : size of baseline data\n","  Output:\n","        loader: baseline data loader\n","  '''\n","  x , y = shuffle_list_data(x_train, y_train)\n","\n","  x, y = x[:num], y[:num]\n","  loader = torch.utils.data.DataLoader(Dataset(x, y), batch_size=int(batch_size/2), shuffle=True)\n","\n","  return loader"],"metadata":{"id":"xg_IVnZXb2Pr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def client_update(client_model, optimizer, train_dataloader, epoch=5):\n","    \"\"\"\n","    This function updates/trains client model on client data\n","    \"\"\"\n","    use_cuda = torch.cuda.is_available()\n","    device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n","    criterion = nn.CrossEntropyLoss()\n","\n","    #model.train()\n","    if use_cuda:\n","            client_model = client_model.cuda()\n","            criterion = criterion.cuda()\n","    for epoch_num in range(epoch):\n","       \n","        total_acc_train = 0\n","        total_loss_train = 0\n","        for train_input, train_label in train_dataloader:\n","            train_label = train_label.to(device)\n","            mask = train_input['attention_mask'].to(device)\n","            input_id = train_input['input_ids'].squeeze(1).to(device)\n","\n","            output = client_model(input_id, mask)\n","            batch_loss = criterion(output, train_label)\n","            total_loss_train += batch_loss.item()\n","                \n","            acc = (output.argmax(dim=1) == train_label).sum().item()\n","            total_acc_train += acc\n","            client_model.zero_grad()\n","            batch_loss.backward()\n","            optimizer.step()\n","    return batch_loss.item()"],"metadata":{"id":"wED1kENXVldX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def client_syn(client_model, global_model):\n","  '''\n","  This function synchronizes the client model with global model\n","  '''\n","  client_model.load_state_dict(global_model.state_dict())"],"metadata":{"id":"Os9qwcfJcmkg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def server_aggregate(global_model, client_models,client_lens):\n","    \"\"\"\n","    This function has aggregation method 'wmean'\n","    wmean takes the weighted mean of the weights of models\n","    \"\"\"\n","    total = sum(client_lens)\n","    n = len(client_models)\n","    global_dict = global_model.state_dict()\n","    for k in global_dict.keys():\n","        global_dict[k] = torch.stack([client_models[i].state_dict()[k].float()*(n*client_lens[i]/total) for i in range(len(client_models))], 0).mean(0)\n","    global_model.load_state_dict(global_dict)\n","    for model in client_models:\n","        model.load_state_dict(global_model.state_dict())"],"metadata":{"id":"7xdeQ_JLWErX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def test(global_model, val_dataloader):\n","    \"\"\"\n","    This function test the global model on test \n","    data and returns test loss and test accuracy \n","    \n","    \"\"\"\n","\n","    use_cuda = torch.cuda.is_available()\n","    device = torch.device(\"cuda\" if use_cuda else \"cpu\")\n","    criterion = nn.CrossEntropyLoss()\n","\n","    if use_cuda:\n","        global_model = global_model.cuda()\n","\n","    total_acc_val = 0\n","    total_loss_val = 0\n","\n","    with torch.no_grad():\n","\n","      for val_input, val_label in val_dataloader:\n","\n","        val_label = val_label.to(device)\n","        mask = val_input['attention_mask'].to(device)\n","        input_id = val_input['input_ids'].squeeze(1).to(device)\n","\n","        output = global_model(input_id, mask)\n","\n","        batch_loss = criterion(output, val_label)\n","        total_loss_val += batch_loss.item()\n","        \n","        acc = (output.argmax(dim=1) == val_label).sum().item()\n","        total_acc_val += acc\n","    return total_loss_val/len(val_dataloader.dataset), total_acc_val/len(val_dataloader.dataset)"],"metadata":{"id":"_Xicz9m9WJPP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["############################################\n","#### Initializing models and optimizer  ####\n","############################################\n","\n","#### global model ##########\n","global_model =  BertClassifier()\n","\n","############# client models ###############################\n","client_models = [ BertClassifier() for _ in range(num_selected)]\n","for model in client_models:\n","    model.load_state_dict(global_model.state_dict()) ### initial synchronizing with global modle \n","\n","###### optimizers ################\n","LR = 1e-6\n","opt = [Adam(model.parameters(), lr= LR) for model in client_models]\n","\n","####### baseline data ############\n","loader_fixed = baseline_data(baseline_num)"],"metadata":{"id":"EUrl2PAjWN29"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["###### Loading the data using the above function ######\n","train_loader, test_loader= get_data_loaders(num_clients,batch_size,classes_pc, real_wd =False ,verbose=True )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fdVlFrYnd2ju","executionInfo":{"status":"ok","timestamp":1666380073552,"user_tz":240,"elapsed":23938,"user":{"displayName":"Md Rafi Rashid","userId":"07573253165411180386"}},"outputId":"1b1e6b73-cf41-4acb-86bc-ee295a6d097a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:59: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n"]}]},{"cell_type":"code","source":["losses_train = []\n","losses_test = []\n","acc_test = []\n","losses_retrain=[]\n","\n","# Runnining FL\n","for r in range(num_rounds):    #Communication round\n","    # select random clients\n","    client_idx = np.random.permutation(num_clients)[:num_selected]\n","    client_lens = [len(train_loader[idx]) for idx in client_idx]\n","\n","    # client update\n","    loss = 0\n","    for i in tqdm(range(num_selected)):\n","      client_syn(client_models[i], global_model)\n","      loss += client_update(client_models[i], opt[i], train_loader[client_idx[i]], epochs)\n","    losses_train.append(loss)\n","\n","    # server aggregate\n","    #### retraining on the global server\n","    loss_retrain =0\n","    for i in tqdm(range(num_selected)):\n","      loss_retrain+= client_update(client_models[i], opt[i], loader_fixed, retrain_epochs)\n","    losses_retrain.append(loss_retrain)\n","    \n","    ### Aggregating the models\n","    server_aggregate(global_model, client_models,client_lens)\n","    test_loss, acc = test(global_model, test_loader)\n","    losses_test.append(test_loss)\n","    acc_test.append(acc)\n","    print('%d-th round' % r)\n","    print('average train loss %0.3g | test loss %0.3g | test acc: %0.3f' % (loss_retrain / num_selected, test_loss, acc))"],"metadata":{"id":"gwfO0bEnWUZY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"18MqLn0YYLwT"},"execution_count":null,"outputs":[]}]}